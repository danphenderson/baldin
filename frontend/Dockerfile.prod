# Explanation of the Dockerfile:
#     Build Stage:
#       - Base Image: The node:20 image is used for building the application.
#       - Dependencies: npm install installs the dependencies defined in package*.json.
#       - Building App: npm run build compiles the React application into static files.
#           This command should correspond to a script in your package.json that builds
#           the production-ready version of your application.
#     Production Stage:
#       - Base Image: nginx:alpine is chosen for the production stage due to its small size and
#            security features. Alpine Linux is minimal and helps reduce potential attack vectors.
#       - Serving Content: Static files generated by the build process are copied into the Nginx
#           server directory. We remove the default Nginx files to ensure only the necessary files are served.
#       - Nginx as HTTP Server: Nginx serves the static files. The container's entry point
#           is set to run Nginx in the foreground to match the Docker container lifecycle.

# --- Build Stage ---
# Use the official Node.js image as the base image for the build stage
FROM node:20 as builder

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy the package.json and package-lock.json files
COPY package*.json ./

# Install npm dependencies
RUN npm install --legacy-peer-deps

# Copy the frontend source code into the container
COPY . .

# Build the production version of the application
RUN npm run build --verbose

# --- Production Stage ---
# Use a smaller, more secure base image for the production stage
FROM nginx:alpine

# Set the working directory to nginx asset directory
WORKDIR /usr/share/nginx/html

# Remove default nginx static assets
RUN rm -rf ./*

# Copy static assets from builder stage
COPY --from=builder /usr/src/app/build .

# Containers run nginx with global directives and daemon off
ENTRYPOINT ["nginx", "-g", "daemon off;"]
